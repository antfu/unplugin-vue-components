import { dirname, relative, isAbsolute } from 'path'
import { promises as fs, existsSync } from 'fs'
import { notNullish, slash } from '@antfu/utils'
import { Context } from './context'
import { getVueVersion } from './options'
import { getTransformedPath } from './utils'

export async function generateIdeHelper(ctx: Context, root: string, filepath: string) {
  const imports: Record<string, string> = Object.fromEntries(
    Object.values({
      ...ctx.componentNameMap,
      ...ctx.componentCustomMap,
    })
      .map(({ path, name, importName }) => {
        if (!name)
          return undefined
        path = getTransformedPath(path, ctx)
        const related = isAbsolute(path)
          ? `./${relative(dirname(filepath), path)}`
          : path

        let entry = 'import '
        if (importName)
          entry += `{ ${importName} as ${name} }`
        else
          entry += name
        entry += ` from '${slash(related)}';`
        return [name, entry]
      })
      .filter(notNullish),
  )

  if (!Object.keys(imports).length)
    return

  const originalContent = existsSync(filepath) ? await fs.readFile(filepath, 'utf-8') : ''

  const lines = Object.entries(imports)
    .sort((a, b) => a[0].localeCompare(b[0]))

  let code = `// generated by unplugin-vue-components
// We suggest you to NOT commit this file into source control
// Read more: https://github.com/antfu/unplugin-vue-components/issues/135
`

  if (getVueVersion() === 'vue3') {
    // @see https://youtrack.jetbrains.com/issue/WEB-48239
    code += `import { createApp } from "vue";
    
${lines.map(line => line[1]).join('\n')}

const app = createApp({});

const Vue = app

${lines.map(line => `Vue.component('${line[0]}', ${line[0]});`).join('\n')}

app.mount("body");

`
  }
  else {
    code += `import Vue from "vue";
    
${lines.map(line => line[1]).join('\n')}

${lines.map(line => `Vue.component('${line[0]}', ${line[0]});\nVue.component('Lazy${line[0]}', ${line[0]});`).join('\n')}

`
  }

  if (code !== originalContent)
    await fs.writeFile(filepath, code, 'utf-8')
}
